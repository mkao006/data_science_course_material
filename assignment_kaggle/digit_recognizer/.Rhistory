install.packages("FNN", repos = "http://cran.stat.auckland.ac.nz")
head(labels)
str(labels)
str(train)
str(train)
str(test)
labels
dim(train)
28^2
dim(test)
str(train.dt)
colnames(train.dt)[1]
aggregatedTrain[1, ]
aggregatedTrain.dt[1, ]
range(aggregatedTrain.dt[1, ])
summary(aggregatedTrain.dt[1, ])
summary(unlist(aggregatedTrain.dt[1, ]))
aggregatedTrain.dt
matrix(c(1, 2, 3, 4), nrow = 2)
matrix(c(1, 2, 3, 4), nrow = 2, byrow = FALSE)
matrix(c(1, 2, 3, 4), nrow = 2, byrow = TRUE)
matrix(unlist(aggregatedTrain.dt[3, -1, with = FALSE]), nrow = 28, byrow = TRUE)
image(matrix(unlist(aggregatedTrain.dt[3, -1, with = FALSE]), nrow = 28, byrow = TRUE))
unlist(aggregatedTrain.dt[3, -1, with = FALSE])[41]
matrix(unlist(aggregatedTrain.dt[3, -1, with = FALSE]), nrow = 28, byrow = TRUE)[[
unlist(aggregatedTrain.dt[3, -1, with = FALSE])[31]
unlist(aggregatedTrain.dt[3, -1, with = FALSE])[32]
unlist(aggregatedTrain.dt[3, -1, with = FALSE])[33]
48 + 23
unlist(aggregatedTrain.dt[3, -1, with = FALSE])[71]
56 + 24
unlist(aggregatedTrain.dt[3, -1, with = FALSE])[80]
matrix(unlist(aggregatedTrain.dt[3, -1, with = FALSE]), nrow = 28, byrow = TRUE)[3, 24]
system("evince missClassified.pdf&")
?image
matrix(c(1, 2, 3, 4), nrow = 2, byrow = TRUE)
image(matrix(c(1, 2, 3, 4), nrow = 2, byrow = TRUE))
image(matrix(c(1, 2, 3, 4), nrow = 2, byrow = TRUE), col = 1:4)
?image
dim(train)
dim(test)
rf$err.rate
rf.train = rf
?randomForest
rf.test$confusion
svm
str(train)
library(data.table)
library(randomForest)
library(e1071)

trainFull = read.csv("train.csv", header=TRUE)
test = read.csv("test.csv", header=TRUE)

labels = as.factor(trainFull[,1])
train = trainFull[,-1]

trainSplits = sample(1:NROW(trainFull), NROW(trainFull) * 0.5)
train1 = trainFull[tranSplits, ]
train2 = trainFull[-tranSplits, ]

dim(train1)
dim(train2)
str(train1)
head(train1[, 1])
unique(train1[, 1])
sort(unique(train1[, 1]))
str(train1)
str(trainFull)
str(trainFull)
rf.predictions
rf.predictions
unique(rf.predictions)
warnings()
neuralnet
library(neuralnet)
args(neuralnet)
str(train1)
str(train1)
str(train1)
str(train1)
str(tmp)
str(tmp)
str(trainMoreFeature)
trainMoreFeature[, "colSum1"] = 1
str(trainMoreFeature)
colnames(trainMoreFeature)
length(rowSums(tmp[, 1:28 + init * 28]))
NROW(trainMoreFeature)
init
colnames(trainMoreFeature)
init
dim(tmp)
obs.mat
vectorToImage
vectorToImage
args(which)
args(which.max)
unique(obs.mat)
i
i
dim(trainMoreFeature)
dim(trainMoreFeature)
rowSums
?rowSums
is.numeric
is.numeric(obs.mat)
traceback()
obs.mat[1, ]
rowsums
dim(obs.mat)
trainMoreFeature[i, 1]
length(rowsums)
length(colsums)
data.frame()
newFeatures
newFeature
newFeatures
newFeatures
newFeatures
newFeatures
i
nrow(newFeatures)
nrow(newFeatures)
nrow(newFeatures)
dim(trainMoreFeature)
dim(newFeatures)
str(newFeatures)
dim(trainFeature1)
dim(trainFeature2)
dim(train1)
dim(train2)
str(trainFeature1)
library(ggplot2)
library(data.table)
library(randomForest)
library(e1071)
library(nnet)
library(neuralnet)

trainFull = read.csv("train.csv", header=TRUE)
trainFull$label = as.factor(trainFull$label)
test = read.csv("test.csv", header=TRUE)

labels = as.factor(trainFull[,1])
train = trainFull[,-1]

rf.train = randomForest(train, labels, xtest=train, ntree = 100)
700/60
7 * 100/60
